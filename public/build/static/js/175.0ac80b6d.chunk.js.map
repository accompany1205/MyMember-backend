{"version":3,"sources":["views/apps/todo/TodoSidebar.js","views/apps/todo/TodoList.js","views/apps/todo/TaskSidebar.js","views/apps/todo/Todo.js"],"names":["TodoSidebar","Fragment","className","onClick","props","mainSidebar","size","Button","Ripple","block","color","addTask","options","wheelPropagation","ListGroup","ListGroupItem","action","changeFilter","active","this","routerProps","location","pathname","React","Component","connect","TodoList","state","todos","handleUpdateTask","currentLocation","value","handleOnChange","e","setState","target","searchTask","a","includes","match","params","filter","GET_TODOS","history","push","prevProps","prevState","app","todo","console","log","renderTodos","length","map","i","isCompleted","key","icon","label","subject","tag","stopPropagation","importantTask","isImportant","starTask","isStarred","trashTask","_id","notes","FormGroup","Input","type","placeholder","onChange","todoApp","getTodos","completeTask","TaskSidebar","Task","status","todoDate","todoTime","handleNewTaskTags","tagsArr","newTask","tags","splice","indexOf","renderTags","taskArr","taskToUpdate","addTaskState","rows","updateTask","ADD_NEW_TASK","disabled","outline","updateLabel","addNewTask","mql","window","matchMedia","TODO","sidebarDocked","matches","sidebarOpen","onSetSidebarOpen","open","mediaQueryChanged","handleAddTask","__v","createdAt","updatedAt","rest","undefined","handleUndoChanges","arr","addListener","removeListener","Consumer","context","sidebar","docked","sidebarClassName","touch","contentClassName","pullRight","direction"],"mappings":"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","file":"static/js/175.0ac80b6d.chunk.js","sourcesContent":["import React from \"react\"\nimport { Button, ListGroup, ListGroupItem } from \"reactstrap\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { X, Layers, Star, Info, Check, Trash, CheckSquare, Clock, Calendar } from \"react-feather\"\nimport { connect } from \"react-redux\"\nimport { changeFilter } from \"../../../redux/actions/todo/index\"\nclass TodoSidebar extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <span\n          className=\"sidebar-close-icon\"\n          onClick={() => this.props.mainSidebar(false)}\n        >\n          <X size={15} />\n        </span>\n        <div className=\"todo-app-menu\">\n          <div className=\"add-task\">\n            <Button.Ripple\n              block\n              className=\"btn-block my-1\"\n              color=\"primary\"\n              onClick={() => {\n                this.props.addTask(\"open\")\n                this.props.mainSidebar(false)\n              }}\n            >\n              Add Task\n            </Button.Ripple>\n          </div>\n          <PerfectScrollbar\n            className=\"sidebar-menu-list\"\n            options={{\n              wheelPropagation: false\n            }}\n          >\n            <ListGroup className=\"font-medium-1\">\n              <ListGroupItem\n                className=\"border-0 pt-0\"\n                action\n                onClick={() => {\n                  this.props.changeFilter(\"all\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/all\"\n                    ? true\n                    : false\n                }\n              >\n                <Layers size={22} />\n                <span className=\"align-middle ml-1\">All</span>\n              </ListGroupItem>\n            </ListGroup>\n            <hr />\n            <h5 className=\"mt-2 mb-1 pt-25\">Filters</h5>\n            <ListGroup className=\"font-medium-1\">\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"today\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/today\"\n                    ? true\n                    : false\n                }\n              >\n                <CheckSquare size={22} />\n                <span className=\"align-middle ml-1\">Today</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"tomorrow\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/tomorrow\"\n                    ? true\n                    : false\n                }\n              >\n                <Clock size={22} />\n                <span className=\"align-middle ml-1\">Tomorrow</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"upcoming\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/upcoming\"\n                    ? true\n                    : false\n                }\n              >\n                <Calendar size={22} />\n                <span className=\"align-middle ml-1\">Upcoming</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"completed\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/completed\"\n                    ? true\n                    : false\n                }\n              >\n                <Check size={22} />\n                <span className=\"align-middle ml-1\">Completed</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"notcompleted\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/notcompleted\"\n                    ? true\n                    : false\n                }\n              >\n                <Trash size={22} />\n                <span className=\"align-middle ml-1\">Notcompleted</span>\n              </ListGroupItem>\n            </ListGroup>\n            <hr />\n            <h5 className=\"mt-2 mb-1 pt-25\">Labels</h5>\n            <ListGroup className=\"font-medium-1\">\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"events\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/events\"\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-primary align-middle\" />\n                <span className=\"align-middle ml-1\">Events</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"business\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/business\"\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-warning align-middle\" />\n                <span className=\"align-middle ml-1\">Business</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"personal\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/personal\"\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-success align-middle\" />\n                <span className=\"align-middle ml-1\">Personal</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter(\"appointment\")\n                }}\n                active={\n                  this.props.routerProps.location.pathname === \"/todo/appointment\"\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-danger align-middle\" />\n                <span className=\"align-middle ml-1\">Appointment</span>\n              </ListGroupItem>\n            </ListGroup>\n          </PerfectScrollbar>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default connect(null, { changeFilter })(TodoSidebar)\n","import React from \"react\"\nimport { FormGroup, Input } from \"reactstrap\"\nimport { Menu, Search, Check, Info, Star, Trash, Edit } from \"react-feather\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { connect } from \"react-redux\"\nimport {\n  getTodos,\n  completeTask,\n  starTask,\n  importantTask,\n  trashTask,\n  searchTask,\n  GET_TODOS\n} from \"../../../redux/actions/todo/index\"\nimport Checkbox from \"../../../components/@vuexy/checkbox/CheckboxesVuexy\"\nclass TodoList extends React.Component {\n  // static getDerivedStateFromProps(props, state) {\n  //   if (props.app.todo.routeParam !== state.currentLocation) {\n  //     return {\n  //       todos: props.app.todo.todos\n  //     }\n  //   }\n  //   // Return null if the state hasn't changed\n  //   return null\n  // }\n  state = {\n    todos: [],\n    handleUpdateTask: null,\n    currentLocation: this.props.routerProps.location.pathname,\n    value: \"\"\n  }\n  async componentDidMount() {\n    if(![\"all\",\"today\",\"tomorrow\",\"upcoming\",\"completed\",\"notcompleted\"].includes(this.props.routerProps.match.params.filter)){\n        this.props.routerProps.history.push('/todo/all');\n        this.props.GET_TODOS(\"all\");\n    }\n    else{\n      this.props.GET_TODOS(this.props.routerProps.match.params.filter);\n    }\n  }\n  componentDidUpdate(prevProps, prevState){\n    if(this.props.app?.todo?.todos !== prevProps?.app?.todo?.todos){\n      \n       this.setState({\n         ...this.state,\n         todos : this.props.app.todo.todos\n       })\n     }\n    // else if(this.props.routerProps.match.params.filter !== this.props.app.todo.routeParam){\n    //   console.log(this.props.routerProps.match.params.filter, \"---\", this.props.app.todo.routeParam);\n    //   this.setState({\n    //     ...this.state,\n    //     todos : this.props.app.todo.todos \n    //   })\n    // } \n  }\n  handleOnChange = e => {\n    this.setState({ value: e.target.value })\n    this.props.searchTask(e.target.value)\n  }  \n\n  render() {\n    const { todos, value } = this.state\n    // let routerFilter = this.props.routerProps.match.params.filter\n    let routerFilter = \"\";\n    // let todosArr = value.length ? this.props.app.todo.filteredTodos : todos\n//     createdAt: \"2020-12-23T18:15:13.507Z\"\n// notes: \"TESTONE WORKS FINE\"\n// status: \"DONE\"\n// subject: \"TESTWORK\"\n// tag: \"TESTchange\"\n// todoDate: \"23/12/2020\"\n// todoTime: \"23:44\"\n// updatedAt: \"2020-12-23T19:46:54.029Z\"\n    // let todosArr =  todos;\n    console.log(\"todos\",this.state.todos)\n    let renderTodos =\n      this.state.todos.length > 0 ? (\n        this.state.todos?.map((todo, i) => {\n          return (\n            <li\n              className={`todo-item ${todo.isCompleted ? \"completed\" : \"\"}`}\n              key={i}\n              // onClick={() => {\n              //   this.props.handleUpdateTask(todo)\n              // }}\n            >\n              <div className=\"todo-title-wrapper d-flex justify-content-between mb-50\">\n                <div className=\"todo-title-area d-flex align-items-center\">\n                  <div className=\"title-wrapper d-flex\">\n                    <Checkbox\n                      color=\"primary\"\n                      className=\"user-checkbox\"\n                      icon={<Check className=\"vx-icon\" size={12} />}\n                      label={\"\"}\n                      // checked={todo.isCompleted}\n                      size=\"sm\"\n                      // onClick={e => {\n                      //   e.stopPropagation()\n                      //   this.props.completeTask(todo)\n                      // }}\n                      // onChange={e => e.stopPropagation()}\n                    />\n                    <h6 className=\"todo-title mt-50 mx-50\">{todo.subject}</h6>\n                  </div>\n                  \n                {/* </div> */}\n                {/* <div\n                  className={`todo-item-action d-flex ${\n                    routerFilter === \"trashed\" ? \"justify-content-end\" : \"\"\n                  }`}\n                > */}\n                  {!!todo.tag  ? (\n                    <div className=\"chip-wrapper\">\n                     \n                        <div className=\"chip mb-0\" key={i}>\n                          <div className=\"chip-body\">\n                            <span className=\"chip-text\">\n                              <span\n                                className={`bullet bullet-${\n                                  todo.tag === \"Events\"\n                                    ? \"primary\"\n                                    : todo.tag === \"Business\"\n                                    ? \"warning\"\n                                    : todo.tag === \"Appointment\"\n                                    ? \"danger\"\n                                    : \"success\"\n                                } bullet-xs`}\n                              />\n                              <span className=\"text-capitalize ml-25\">\n                                {todo.tag}\n                              </span>\n                            </span>\n                          </div>\n                        </div>\n                    </div>\n                   ) : null} \n                  </div>\n                  <div\n                  className={`todo-item-action d-flex ${\n                    routerFilter === \"trashed\" ? \"justify-content-end\" : \"\"\n                  }`}\n                >\n                  <div\n                    className={`todo-item-info d-inline-block ${\n                      routerFilter === \"trashed\" ? \"mr-1\" : \"mr-1 mr-sm-0\"\n                    }`}\n                    onClick={e => {\n                      e.stopPropagation()\n                      this.props.importantTask(todo)\n                    }}\n                  >\n                    <Info\n                      size={17}\n                      className={`${todo.isImportant ? \"text-success\" : \"\"}`}\n                    />\n                  </div>\n                  <div\n                    className=\"todo-item-favorite d-inline-block mr-1 mr-sm-0\"\n                    onClick={e => {\n                      e.stopPropagation()\n                      this.props.starTask(todo)\n                    }}\n                  >\n                    <Star\n                      size={17}\n                      className={`${todo.isStarred ? \"text-warning\" : \"\"}`}\n                    />\n                  </div>\n                  <div\n                    className=\"todo-item-favorite d-inline-block mr-1 mr-sm-0\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.props.handleUpdateTask(todo)\n                    }}\n      \n                  >\n                    <Edit\n                      size={17}\n                      // className={`${todo.isStarred ? \"text-warning\" : \"\"}`}\n                    />\n                  </div>\n                  {routerFilter !== \"trashed\" ? (\n                    <div\n                      className=\"todo-item-delete d-inline-block mr-1 mr-sm-0\"\n                      onClick={e => {\n                        e.stopPropagation()\n                        this.props.trashTask(todo._id)\n                      }}\n                    >\n                      <Trash size={17} />\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n              {!!todo.notes ? (\n                <p className=\"todo-desc truncate mb-0\">{todo.notes}</p>\n              ) : (\n                \"\"\n              )}\n            </li>\n          )\n        })\n      ) : (\n        <p className=\"p-1 text-center mt-2 font-medium-3 text-bold-500\">\n          No tasks at this time\n        </p>\n      )\n\n    return (\n      <div className=\"content-right\">\n        <div className=\"todo-app-area\">\n          <div className=\"todo-app-list-wrapper\">\n            <div className=\"todo-app-list\">\n              <div className=\"app-fixed-search\">\n                <div\n                  className=\"sidebar-toggle d-inline-block d-lg-none\"\n                  onClick={() => this.props.mainSidebar(true)}\n                >\n                  <Menu size={24} />\n                </div>\n                <FormGroup className=\"position-relative has-icon-left m-0 d-inline-block d-lg-block\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    onChange={e => this.handleOnChange(e)}\n                    value={value}\n                  />\n                  <div className=\"form-control-position\">\n                    <Search size={15} />\n                  </div>\n                </FormGroup>\n              </div>\n              <PerfectScrollbar\n                className=\"todo-task-list\"\n                options={{\n                  wheelPropagation: false\n                }}\n              >\n                <ul className=\"todo-task-list-wrapper\">{renderTodos}</ul>\n              </PerfectScrollbar>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  console.log(state.todoApp);\n  return {\n    app: state.todoApp\n  }\n}\nexport default connect(mapStateToProps, {\n  getTodos,\n  completeTask,\n  starTask,\n  importantTask,\n  trashTask,\n  searchTask,\n  GET_TODOS\n})(TodoList)\n","import React from \"react\"\nimport {\n  Input,\n  Button,\n  FormGroup\n} from \"reactstrap\"\nimport { X, Info, Star, Tag, Check } from \"react-feather\"\nimport Checkbox from \"../../../components/@vuexy/checkbox/CheckboxesVuexy\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { connect } from \"react-redux\"\nimport {\n  starTask,\n  completeTask,\n  importantTask,\n  updateTask,\n  updateLabel,\n  addNewTask,\n  ADD_NEW_TASK\n} from \"../../../redux/actions/todo/index\"\nimport \"../../../assets/scss/pages/users.scss\"\n\nclass TaskSidebar extends React.Component {\n\n  state = {\n    // taskToUpdate: null,\n    // taskTitle: \"\",\n    // taskDesc: \"\",\n    // taskStatus : false,\n    // taskStarred : false,\n    // taskImportant  : false,\n        \n    Task: {\n        notes: \"\",\n        status: \"\",\n        subject: \"\",\n        tag: \"\",\n        todoDate: \"\",\n        todoTime: \"\",\n      // title: \"\",\n      // desc: \"\",\n      // tags: [],\n      // isCompleted: false,\n      // isImportant: false,\n      // isStarred: false\n\n    }\n  }\n   \n\n\n  componentDidUpdate(prevProps, prevState) {\n  //   // if(\n  //   //   (this.props.taskToUpdate !== null && this.state.taskToUpdate !== this.props.taskToUpdate) || \n  //   //   (this.props.taskToUpdate !== null && this.state.taskStatus !== this.props.taskToUpdate.isCompleted) ||\n  //   //   (this.props.taskToUpdate !== null && this.state.taskStarred !== this.props.taskToUpdate.isStarred) ||\n  //   //   (this.props.taskToUpdate !== null && this.state.taskImportant !== this.props.taskToUpdate.isImportant) \n  //   //   ){\n  //   //   this.setState({ \n  //   //     taskToUpdate : this.props.taskToUpdate, \n  //   //     taskTitle :  this.props.taskToUpdate.title,\n  //   //     taskDesc :  this.props.taskToUpdate.desc,\n  //   //     taskStatus : this.props.taskToUpdate.isCompleted,\n  //   //     taskStarred : this.props.taskToUpdate.isStarred,\n  //   //     taskImportant : this.props.taskToUpdate.isImportant\n  //   //   })\n  //   // }\n  //   // else{\n  //   //   return \n  //   // }\n\n   if(!!this.props.taskToUpdate && prevProps.taskToUpdate !== this.props.taskToUpdate){\n       let {_id, ...todo} = this.props.taskToUpdate;\n       this.setState({Task : { ...this.state.Task, ...todo}});\n     }\n    \n  }\n  \n\n\n  handleNewTaskTags = tag => {\n    let tagsArr = this.state.newTask.tags\n    if (tagsArr.includes(tag)) {\n      tagsArr.splice(tagsArr.indexOf(tag), 1)\n    } else {\n      tagsArr.push(tag)\n    }\n    this.setState({\n      ...this.state.newTask,\n      tags: tag\n    })\n  }\n\n  renderTags = taskArr => {\n    return taskArr.map((tag, i) => (\n      <div className=\"chip mb-0 mr-50\" key={i}>\n        <div className=\"chip-body\">\n          <span className=\"chip-text\">\n            <span\n              className={`bullet bullet-${\n                tag === \"backend\"\n                  ? \"warning\"\n                  : tag === \"doc\"\n                  ? \"success\"\n                  : tag === \"bug\"\n                  ? \"danger\"\n                  : \"primary\"\n              } bullet-xs`}\n            />\n            <span className=\"text-capitalize ml-25\">{tag}</span>\n          </span>\n        </div>\n      </div>\n    ))\n  }\n\n  render() {\n    const { Task } = this.state\n\n    return (\n      <div\n        className={`task-sidebar ${\n          this.props.addTaskState === true ? \"show\" : \"\"\n        }`}\n      >\n        <div className=\"task-header\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"task-type-title text-bold-600\">\n              <h3>\n                {this.props.taskToUpdate && this.props.taskToUpdate._id\n                  ? \"Update Task\"\n                  : \"Add Task\"}\n              </h3>\n            </div>\n            <div className=\"close-icon\">\n              <X\n                className=\"cursor-pointer\"\n                size={20}\n                onClick={() => {\n                  this.setState({\n                    Task: {\n                      notes: \"\",\n                      status: \"\",\n                      subject: \"\",\n                      tag: \"\",\n                      todoDate: \"\",\n                      todoTime: \"\",\n                    }\n                  })\n                  this.props.addTask(\"close\")}}\n              />\n            </div>\n          </div>\n        </div>\n        <PerfectScrollbar>\n          <div className=\"task-body\">\n            {/* <div className=\"d-flex justify-content-between mb-2\">\n              <div className=\"mark-complete\">\n                {this.props.taskToUpdate && this.props.taskToUpdate.id && <Checkbox\n                  color=\"primary\"\n                  className=\"user-checkbox\"\n                  icon={<Check className=\"vx-icon\" size={15} />}\n                  label={\"\"}\n                  checked={ false }                  \n                  onChange={e =>  {\n                    // this.props.completeTask(this.props.taskToUpdate)\n                  }}\n                />}\n              </div>\n              <div className=\"task-actions\">\n                <Info\n                  size={20}\n                  className={`mr-50 ${\n                      (this.props.taskToUpdate !== null && this.state.taskImportant) ||\n                      Task.isImportant \n                      ? \"text-success\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null){\n                      this.props.importantTask(this.props.taskToUpdate)\n                    }\n                    else{\n                      this.setState({\n                        newTask : {\n                          ...this.state.newTask,\n                          isImportant : !this.state.newTask.isImportant\n                        }\n                      })\n                    }\n                      \n                  }}\n                />\n                <Star\n                  size={20}\n                  className={`mr-50 ${\n                      (this.props.taskToUpdate !== null  && this.state.taskStarred) ||\n                      newTask.isStarred \n                      ? \"text-warning\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null){\n                      this.props.starTask(this.props.taskToUpdate)\n                    }\n                    else{\n                      this.setState({\n                        newTask : {\n                          ...this.state.newTask,\n                          isStarred : !this.state.newTask.isStarred\n                        }\n                      })\n                    }\n                    \n                  }}\n                />\n                <UncontrolledDropdown className=\"d-inline-block\">\n                  <DropdownToggle tag=\"span\">\n                    <Tag className=\"mr-50\" size={20} />\n                  </DropdownToggle>\n                  <DropdownMenu tag=\"ul\" right>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Events\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"frontend\") )||\n                            (newTask.tags.includes(\"frontend\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"frontend\")\n                          else this.handleNewTaskTags(\"frontend\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Business\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"backend\"))||\n                            (newTask.tags.includes(\"backend\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"backend\")\n                            else this.handleNewTaskTags(\"backend\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Personal\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"doc\"))||\n                            (newTask.tags.includes(\"doc\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"doc\")\n                          else this.handleNewTaskTags(\"doc\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Appointment\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"bug\"))||\n                            (newTask.tags.includes(\"bug\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"bug\")\n                          else this.handleNewTaskTags(\"bug\")\n                        }}\n                      />\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div>\n            </div> */}\n            <FormGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"subject\"\n                value={\n                   Task.subject\n                }\n                onChange={e => {\n                  \n                    this.setState({ Task : {\n                      ...this.state.Task,\n                      subject : e.target.value\n                    } })\n                  \n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <label>Date</label>\n              <Input\n                type=\"date\"\n                placeholder=\"Date\"\n                value={\n                   Task.todoDate\n                }\n                onChange={e => {\n                    this.setState({ Task : {\n                      ...this.state.Task,\n                      todoDate : e.target.value\n                    } })\n               }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <label>Time</label>\n              <Input\n                type=\"time\"\n                placeholder=\"time\"\n                value={\n                Task.todoTime\n                }\n                onChange={e => {\n                 \n                    this.setState({ Task : {\n                      ...this.state.Task,\n                      todoTime : e.target.value\n                    } })\n                 \n                }}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>Tag</label>\n              <select className=\"slt\" value={Task.tag} onChange={(e) => {\n                this.setState({Task : {\n                  ...this.state.Task,\n                  tag : e.target.value\n                }})\n              } }>\n                      <option>--Select--</option>\n                      <option>Events</option>\n                      <option>Business</option>\n                      <option>Personal</option>\n                      <option>Appointment</option>\n              </select>\n            </FormGroup>\n             \n            <FormGroup>\n              <label>status</label>\n              <select className=\"slt\" value={Task.status} onChange={(e) => {\n                this.setState({Task : {\n                  ...this.state.Task,\n                  status : e.target.value\n                }})\n              } }>\n                    <option>--Select--</option>\n                    <option>Past Due</option>\n                    <option>Pending</option>\n                    <option>Rescheduled</option>\n                    <option>Completed</option>\n                    <option>Not Completed</option>\n              </select>\n            </FormGroup>\n\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                placeholder=\"Notes\"\n                rows=\"3\"\n                value={\n                  Task.notes\n                }\n                onChange={e => {\n                    this.setState({ Task : {\n                      ...this.state.Task,\n                      notes : e.target.value\n                    } })\n                  \n                }}\n              />\n            </FormGroup>\n            {/* <div className=\"chip-wrapper my-1 d-flex flex-wrap\">\n              {this.props.taskToUpdate !== null &&\n              this.props.taskToUpdate.tags &&\n              this.props.taskToUpdate.tags.length > 0\n                ? this.renderTags(this.props.taskToUpdate.tags)\n                : null}\n            </div> */}\n\n            <hr className=\"my-2\" />\n            <div className=\"d-flex justify-content-end\">\n              <Button.Ripple\n                className=\"mr-50\"\n                color=\"primary\"\n                onClick={() => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.props.updateTask(this.props.taskToUpdate._id, this.state.Task)\n                  } else {\n                    this.props.ADD_NEW_TASK(this.state.Task)\n                  }\n                  this.props.addTask(\"close\")\n                  this.setState({\n                    Task: {\n                      notes: \"\",\n                      status: \"\",\n                      subject: \"\",\n                      tag: \"\",\n                      todoDate: \"\",\n                      todoTime: \"\",\n                    }\n                  })\n                }}\n                disabled={false}\n                // disabled={\n                //   taskTitle.length > 0 || newTask.title.length > 0\n                //     ? false\n                //     : true\n                // }\n              >\n                {this.props.taskToUpdate &&\n                this.props.taskToUpdate._id &&\n                this.props.taskToUpdate !== null\n                  ? \"Update\"\n                  : \"Add\"}\n              </Button.Ripple>\n              <Button.Ripple\n                color=\"light\"\n                outline\n                onClick={() => {\n                  this.props.addTask(\"close\")\n                  this.setState({\n                    Task: {\n                      notes: \"\",\n                      status: \"\",\n                      subject: \"\",\n                      tag: \"\",\n                      todoDate: \"\",\n                      todoTime: \"\",\n                    }\n                  })\n                }}\n              >\n                Cancel\n              </Button.Ripple>\n            </div> \n          </div>\n        </PerfectScrollbar>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    app: state.todoApp\n  }\n}\n\nexport default connect(mapStateToProps, {\n  completeTask,\n  importantTask,\n  starTask,\n  updateTask,\n  updateLabel,\n  addNewTask,\n  ADD_NEW_TASK\n})(TaskSidebar)\n","import React from \"react\"\nimport Sidebar from \"react-sidebar\"\nimport { ContextLayout } from \"../../../utility/context/Layout\"\nimport TodoSidebar from \"./TodoSidebar\"\nimport TodoList from \"./TodoList\"\nimport TaskSidebar from \"./TaskSidebar\"\nimport \"../../../assets/scss/pages/app-todo.scss\"\nconst mql = window.matchMedia(`(min-width: 992px)`)\n\nclass TODO extends React.Component {\n  state = {\n    addTask: false,\n    sidebarDocked: mql.matches,\n    sidebarOpen: false,\n    taskToUpdate: null,\n    prevState: null\n  }\n  UNSAFE_componentWillMount() {\n    mql.addListener(this.mediaQueryChanged)\n  }\n\n  componentWillUnmount() {\n    mql.removeListener(this.mediaQueryChanged)\n  }\n\n  onSetSidebarOpen = open => {\n    this.setState({ sidebarOpen: open })\n  }\n\n  mediaQueryChanged = () => {\n    this.setState({ sidebarDocked: mql.matches, sidebarOpen: false })\n  }\n\n  handleAddTask = status => {\n    status === \"open\"\n      ? this.setState({ addTask: true })\n      : this.setState({ addTask: false, taskToUpdate: null })\n  }\n  handleUpdateTask = todo => {\n    console.log('todo', todo);\n    const {__v, createdAt, updatedAt, ...rest} = todo;\n    if (rest !== undefined) {\n      this.setState({ addTask: true, taskToUpdate: rest })\n    } else {\n      this.setState({ taskToUpdate: null })\n    }\n  }\n\n  handleUndoChanges = arr => {\n    this.setState({\n      prevState: arr\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"todo-application position-relative\">\n        <div\n          className={`app-content-overlay ${\n            this.state.addTask || this.state.sidebarOpen ? \"show\" : \"\"\n          }`}\n          onClick={() => {\n            this.handleAddTask(\"close\")\n            this.onSetSidebarOpen(false)\n          }}\n        />\n        <ContextLayout.Consumer>\n          {context => (\n            <Sidebar\n              sidebar={\n                <TodoSidebar\n                  routerProps={this.props}\n                  addTask={this.handleAddTask}\n                  mainSidebar={this.onSetSidebarOpen}\n                />\n              }\n              docked={this.state.sidebarDocked}\n              open={this.state.sidebarOpen}\n              sidebarClassName=\"sidebar-content todo-sidebar d-flex\"\n              touch={false}\n              contentClassName=\"sidebar-children d-none\"\n              pullRight={context.state.direction === \"rtl\"}>\n              \"\"\n            </Sidebar>\n          )}\n        </ContextLayout.Consumer>\n        <TodoList\n          routerProps={this.props}\n          handleUpdateTask={this.handleUpdateTask}\n          mainSidebar={this.onSetSidebarOpen}\n          prevState={this.state.prevState}\n        />\n        <TaskSidebar\n          addTask={this.handleAddTask}\n          addTaskState={this.state.addTask}\n          taskToUpdate={this.state.taskToUpdate}\n          newTask={this.state.newTask}\n          mainSidebar={this.onSetSidebarOpen}\n          handleUndoChanges={this.handleUndoChanges}\n        />\n      </div>\n    )\n  }\n}\n\nexport default TODO\n"],"sourceRoot":""}